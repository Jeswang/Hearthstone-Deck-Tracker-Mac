/*************************************************************************
 *
 * TIGHTDB CONFIDENTIAL
 * __________________
 *
 *  [2011] - [2012] TightDB Inc
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of TightDB Incorporated and its suppliers,
 * if any.  The intellectual and technical concepts contained
 * herein are proprietary to TightDB Incorporated
 * and its suppliers and may be covered by U.S. and Foreign Patents,
 * patents in process, and are protected by trade secret or copyright law.
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from TightDB Incorporated.
 *
 *************************************************************************/

/*************************************************************************
 *
 * CAUTION:  DO NOT EDIT THIS FILE -- YOUR CHANGES WILL BE LOST!
 *
 * This file is generated by Cheetah from the following template:
 *
 *     table_macros.hpp.cheetah
 *
 *************************************************************************/

#ifndef TIGHTDB_TABLE_MACROS_HPP
#define TIGHTDB_TABLE_MACROS_HPP

#include <tightdb/table_basic.hpp>


#define TIGHTDB_TABLE_1(Table, name1, type1) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_2(Table, name1, type1, name2, type2) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_3(Table, name1, type1, name2, type2, name3, type3) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_4(Table, name1, type1, name2, type2, name3, type3, name4, type4) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns3; \
    typedef ::tightdb::util::TypeAppend< Columns3, type4 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        typename Col<3>::type name4; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i), name4(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
        names[3] = tightdb::StringData(#name4, sizeof #name4 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3, type4 name4) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3, name4)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_5(Table, name1, type1, name2, type2, name3, type3, name4, type4, name5, type5) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns3; \
    typedef ::tightdb::util::TypeAppend< Columns3, type4 >::type Columns4; \
    typedef ::tightdb::util::TypeAppend< Columns4, type5 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        typename Col<3>::type name4; \
        typename Col<4>::type name5; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i), name4(i), name5(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
        names[3] = tightdb::StringData(#name4, sizeof #name4 - 1); \
        names[4] = tightdb::StringData(#name5, sizeof #name5 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3, name4, name5)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_6(Table, name1, type1, name2, type2, name3, type3, name4, type4, name5, type5, name6, type6) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns3; \
    typedef ::tightdb::util::TypeAppend< Columns3, type4 >::type Columns4; \
    typedef ::tightdb::util::TypeAppend< Columns4, type5 >::type Columns5; \
    typedef ::tightdb::util::TypeAppend< Columns5, type6 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        typename Col<3>::type name4; \
        typename Col<4>::type name5; \
        typename Col<5>::type name6; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i), name4(i), name5(i), name6(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
        names[3] = tightdb::StringData(#name4, sizeof #name4 - 1); \
        names[4] = tightdb::StringData(#name5, sizeof #name5 - 1); \
        names[5] = tightdb::StringData(#name6, sizeof #name6 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_7(Table, name1, type1, name2, type2, name3, type3, name4, type4, name5, type5, name6, type6, name7, type7) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns3; \
    typedef ::tightdb::util::TypeAppend< Columns3, type4 >::type Columns4; \
    typedef ::tightdb::util::TypeAppend< Columns4, type5 >::type Columns5; \
    typedef ::tightdb::util::TypeAppend< Columns5, type6 >::type Columns6; \
    typedef ::tightdb::util::TypeAppend< Columns6, type7 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        typename Col<3>::type name4; \
        typename Col<4>::type name5; \
        typename Col<5>::type name6; \
        typename Col<6>::type name7; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i), name4(i), name5(i), name6(i), name7(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
        names[3] = tightdb::StringData(#name4, sizeof #name4 - 1); \
        names[4] = tightdb::StringData(#name5, sizeof #name5 - 1); \
        names[5] = tightdb::StringData(#name6, sizeof #name6 - 1); \
        names[6] = tightdb::StringData(#name7, sizeof #name7 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_8(Table, name1, type1, name2, type2, name3, type3, name4, type4, name5, type5, name6, type6, name7, type7, name8, type8) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns3; \
    typedef ::tightdb::util::TypeAppend< Columns3, type4 >::type Columns4; \
    typedef ::tightdb::util::TypeAppend< Columns4, type5 >::type Columns5; \
    typedef ::tightdb::util::TypeAppend< Columns5, type6 >::type Columns6; \
    typedef ::tightdb::util::TypeAppend< Columns6, type7 >::type Columns7; \
    typedef ::tightdb::util::TypeAppend< Columns7, type8 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        typename Col<3>::type name4; \
        typename Col<4>::type name5; \
        typename Col<5>::type name6; \
        typename Col<6>::type name7; \
        typename Col<7>::type name8; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i), name4(i), name5(i), name6(i), name7(i), name8(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
        names[3] = tightdb::StringData(#name4, sizeof #name4 - 1); \
        names[4] = tightdb::StringData(#name5, sizeof #name5 - 1); \
        names[5] = tightdb::StringData(#name6, sizeof #name6 - 1); \
        names[6] = tightdb::StringData(#name7, sizeof #name7 - 1); \
        names[7] = tightdb::StringData(#name8, sizeof #name8 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_9(Table, name1, type1, name2, type2, name3, type3, name4, type4, name5, type5, name6, type6, name7, type7, name8, type8, name9, type9) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns3; \
    typedef ::tightdb::util::TypeAppend< Columns3, type4 >::type Columns4; \
    typedef ::tightdb::util::TypeAppend< Columns4, type5 >::type Columns5; \
    typedef ::tightdb::util::TypeAppend< Columns5, type6 >::type Columns6; \
    typedef ::tightdb::util::TypeAppend< Columns6, type7 >::type Columns7; \
    typedef ::tightdb::util::TypeAppend< Columns7, type8 >::type Columns8; \
    typedef ::tightdb::util::TypeAppend< Columns8, type9 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        typename Col<3>::type name4; \
        typename Col<4>::type name5; \
        typename Col<5>::type name6; \
        typename Col<6>::type name7; \
        typename Col<7>::type name8; \
        typename Col<8>::type name9; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i), name4(i), name5(i), name6(i), name7(i), name8(i), name9(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
        names[3] = tightdb::StringData(#name4, sizeof #name4 - 1); \
        names[4] = tightdb::StringData(#name5, sizeof #name5 - 1); \
        names[5] = tightdb::StringData(#name6, sizeof #name6 - 1); \
        names[6] = tightdb::StringData(#name7, sizeof #name7 - 1); \
        names[7] = tightdb::StringData(#name8, sizeof #name8 - 1); \
        names[8] = tightdb::StringData(#name9, sizeof #name9 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_10(Table, name1, type1, name2, type2, name3, type3, name4, type4, name5, type5, name6, type6, name7, type7, name8, type8, name9, type9, name10, type10) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns3; \
    typedef ::tightdb::util::TypeAppend< Columns3, type4 >::type Columns4; \
    typedef ::tightdb::util::TypeAppend< Columns4, type5 >::type Columns5; \
    typedef ::tightdb::util::TypeAppend< Columns5, type6 >::type Columns6; \
    typedef ::tightdb::util::TypeAppend< Columns6, type7 >::type Columns7; \
    typedef ::tightdb::util::TypeAppend< Columns7, type8 >::type Columns8; \
    typedef ::tightdb::util::TypeAppend< Columns8, type9 >::type Columns9; \
    typedef ::tightdb::util::TypeAppend< Columns9, type10 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        typename Col<3>::type name4; \
        typename Col<4>::type name5; \
        typename Col<5>::type name6; \
        typename Col<6>::type name7; \
        typename Col<7>::type name8; \
        typename Col<8>::type name9; \
        typename Col<9>::type name10; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i), name4(i), name5(i), name6(i), name7(i), name8(i), name9(i), name10(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
        names[3] = tightdb::StringData(#name4, sizeof #name4 - 1); \
        names[4] = tightdb::StringData(#name5, sizeof #name5 - 1); \
        names[5] = tightdb::StringData(#name6, sizeof #name6 - 1); \
        names[6] = tightdb::StringData(#name7, sizeof #name7 - 1); \
        names[7] = tightdb::StringData(#name8, sizeof #name8 - 1); \
        names[8] = tightdb::StringData(#name9, sizeof #name9 - 1); \
        names[9] = tightdb::StringData(#name10, sizeof #name10 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_11(Table, name1, type1, name2, type2, name3, type3, name4, type4, name5, type5, name6, type6, name7, type7, name8, type8, name9, type9, name10, type10, name11, type11) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns3; \
    typedef ::tightdb::util::TypeAppend< Columns3, type4 >::type Columns4; \
    typedef ::tightdb::util::TypeAppend< Columns4, type5 >::type Columns5; \
    typedef ::tightdb::util::TypeAppend< Columns5, type6 >::type Columns6; \
    typedef ::tightdb::util::TypeAppend< Columns6, type7 >::type Columns7; \
    typedef ::tightdb::util::TypeAppend< Columns7, type8 >::type Columns8; \
    typedef ::tightdb::util::TypeAppend< Columns8, type9 >::type Columns9; \
    typedef ::tightdb::util::TypeAppend< Columns9, type10 >::type Columns10; \
    typedef ::tightdb::util::TypeAppend< Columns10, type11 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        typename Col<3>::type name4; \
        typename Col<4>::type name5; \
        typename Col<5>::type name6; \
        typename Col<6>::type name7; \
        typename Col<7>::type name8; \
        typename Col<8>::type name9; \
        typename Col<9>::type name10; \
        typename Col<10>::type name11; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i), name4(i), name5(i), name6(i), name7(i), name8(i), name9(i), name10(i), name11(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
        names[3] = tightdb::StringData(#name4, sizeof #name4 - 1); \
        names[4] = tightdb::StringData(#name5, sizeof #name5 - 1); \
        names[5] = tightdb::StringData(#name6, sizeof #name6 - 1); \
        names[6] = tightdb::StringData(#name7, sizeof #name7 - 1); \
        names[7] = tightdb::StringData(#name8, sizeof #name8 - 1); \
        names[8] = tightdb::StringData(#name9, sizeof #name9 - 1); \
        names[9] = tightdb::StringData(#name10, sizeof #name10 - 1); \
        names[10] = tightdb::StringData(#name11, sizeof #name11 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_12(Table, name1, type1, name2, type2, name3, type3, name4, type4, name5, type5, name6, type6, name7, type7, name8, type8, name9, type9, name10, type10, name11, type11, name12, type12) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns3; \
    typedef ::tightdb::util::TypeAppend< Columns3, type4 >::type Columns4; \
    typedef ::tightdb::util::TypeAppend< Columns4, type5 >::type Columns5; \
    typedef ::tightdb::util::TypeAppend< Columns5, type6 >::type Columns6; \
    typedef ::tightdb::util::TypeAppend< Columns6, type7 >::type Columns7; \
    typedef ::tightdb::util::TypeAppend< Columns7, type8 >::type Columns8; \
    typedef ::tightdb::util::TypeAppend< Columns8, type9 >::type Columns9; \
    typedef ::tightdb::util::TypeAppend< Columns9, type10 >::type Columns10; \
    typedef ::tightdb::util::TypeAppend< Columns10, type11 >::type Columns11; \
    typedef ::tightdb::util::TypeAppend< Columns11, type12 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        typename Col<3>::type name4; \
        typename Col<4>::type name5; \
        typename Col<5>::type name6; \
        typename Col<6>::type name7; \
        typename Col<7>::type name8; \
        typename Col<8>::type name9; \
        typename Col<9>::type name10; \
        typename Col<10>::type name11; \
        typename Col<11>::type name12; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i), name4(i), name5(i), name6(i), name7(i), name8(i), name9(i), name10(i), name11(i), name12(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
        names[3] = tightdb::StringData(#name4, sizeof #name4 - 1); \
        names[4] = tightdb::StringData(#name5, sizeof #name5 - 1); \
        names[5] = tightdb::StringData(#name6, sizeof #name6 - 1); \
        names[6] = tightdb::StringData(#name7, sizeof #name7 - 1); \
        names[7] = tightdb::StringData(#name8, sizeof #name8 - 1); \
        names[8] = tightdb::StringData(#name9, sizeof #name9 - 1); \
        names[9] = tightdb::StringData(#name10, sizeof #name10 - 1); \
        names[10] = tightdb::StringData(#name11, sizeof #name11 - 1); \
        names[11] = tightdb::StringData(#name12, sizeof #name12 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11, type12 name12) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11, type12 name12) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11, type12 name12) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_13(Table, name1, type1, name2, type2, name3, type3, name4, type4, name5, type5, name6, type6, name7, type7, name8, type8, name9, type9, name10, type10, name11, type11, name12, type12, name13, type13) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns3; \
    typedef ::tightdb::util::TypeAppend< Columns3, type4 >::type Columns4; \
    typedef ::tightdb::util::TypeAppend< Columns4, type5 >::type Columns5; \
    typedef ::tightdb::util::TypeAppend< Columns5, type6 >::type Columns6; \
    typedef ::tightdb::util::TypeAppend< Columns6, type7 >::type Columns7; \
    typedef ::tightdb::util::TypeAppend< Columns7, type8 >::type Columns8; \
    typedef ::tightdb::util::TypeAppend< Columns8, type9 >::type Columns9; \
    typedef ::tightdb::util::TypeAppend< Columns9, type10 >::type Columns10; \
    typedef ::tightdb::util::TypeAppend< Columns10, type11 >::type Columns11; \
    typedef ::tightdb::util::TypeAppend< Columns11, type12 >::type Columns12; \
    typedef ::tightdb::util::TypeAppend< Columns12, type13 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        typename Col<3>::type name4; \
        typename Col<4>::type name5; \
        typename Col<5>::type name6; \
        typename Col<6>::type name7; \
        typename Col<7>::type name8; \
        typename Col<8>::type name9; \
        typename Col<9>::type name10; \
        typename Col<10>::type name11; \
        typename Col<11>::type name12; \
        typename Col<12>::type name13; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i), name4(i), name5(i), name6(i), name7(i), name8(i), name9(i), name10(i), name11(i), name12(i), name13(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
        names[3] = tightdb::StringData(#name4, sizeof #name4 - 1); \
        names[4] = tightdb::StringData(#name5, sizeof #name5 - 1); \
        names[5] = tightdb::StringData(#name6, sizeof #name6 - 1); \
        names[6] = tightdb::StringData(#name7, sizeof #name7 - 1); \
        names[7] = tightdb::StringData(#name8, sizeof #name8 - 1); \
        names[8] = tightdb::StringData(#name9, sizeof #name9 - 1); \
        names[9] = tightdb::StringData(#name10, sizeof #name10 - 1); \
        names[10] = tightdb::StringData(#name11, sizeof #name11 - 1); \
        names[11] = tightdb::StringData(#name12, sizeof #name12 - 1); \
        names[12] = tightdb::StringData(#name13, sizeof #name13 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11, type12 name12, type13 name13) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12, name13)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11, type12 name12, type13 name13) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12, name13)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11, type12 name12, type13 name13) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12, name13)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_14(Table, name1, type1, name2, type2, name3, type3, name4, type4, name5, type5, name6, type6, name7, type7, name8, type8, name9, type9, name10, type10, name11, type11, name12, type12, name13, type13, name14, type14) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns3; \
    typedef ::tightdb::util::TypeAppend< Columns3, type4 >::type Columns4; \
    typedef ::tightdb::util::TypeAppend< Columns4, type5 >::type Columns5; \
    typedef ::tightdb::util::TypeAppend< Columns5, type6 >::type Columns6; \
    typedef ::tightdb::util::TypeAppend< Columns6, type7 >::type Columns7; \
    typedef ::tightdb::util::TypeAppend< Columns7, type8 >::type Columns8; \
    typedef ::tightdb::util::TypeAppend< Columns8, type9 >::type Columns9; \
    typedef ::tightdb::util::TypeAppend< Columns9, type10 >::type Columns10; \
    typedef ::tightdb::util::TypeAppend< Columns10, type11 >::type Columns11; \
    typedef ::tightdb::util::TypeAppend< Columns11, type12 >::type Columns12; \
    typedef ::tightdb::util::TypeAppend< Columns12, type13 >::type Columns13; \
    typedef ::tightdb::util::TypeAppend< Columns13, type14 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        typename Col<3>::type name4; \
        typename Col<4>::type name5; \
        typename Col<5>::type name6; \
        typename Col<6>::type name7; \
        typename Col<7>::type name8; \
        typename Col<8>::type name9; \
        typename Col<9>::type name10; \
        typename Col<10>::type name11; \
        typename Col<11>::type name12; \
        typename Col<12>::type name13; \
        typename Col<13>::type name14; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i), name4(i), name5(i), name6(i), name7(i), name8(i), name9(i), name10(i), name11(i), name12(i), name13(i), name14(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
        names[3] = tightdb::StringData(#name4, sizeof #name4 - 1); \
        names[4] = tightdb::StringData(#name5, sizeof #name5 - 1); \
        names[5] = tightdb::StringData(#name6, sizeof #name6 - 1); \
        names[6] = tightdb::StringData(#name7, sizeof #name7 - 1); \
        names[7] = tightdb::StringData(#name8, sizeof #name8 - 1); \
        names[8] = tightdb::StringData(#name9, sizeof #name9 - 1); \
        names[9] = tightdb::StringData(#name10, sizeof #name10 - 1); \
        names[10] = tightdb::StringData(#name11, sizeof #name11 - 1); \
        names[11] = tightdb::StringData(#name12, sizeof #name12 - 1); \
        names[12] = tightdb::StringData(#name13, sizeof #name13 - 1); \
        names[13] = tightdb::StringData(#name14, sizeof #name14 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11, type12 name12, type13 name13, type14 name14) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12, name13, name14)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11, type12 name12, type13 name13, type14 name14) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12, name13, name14)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11, type12 name12, type13 name13, type14 name14) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12, name13, name14)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#define TIGHTDB_TABLE_15(Table, name1, type1, name2, type2, name3, type3, name4, type4, name5, type5, name6, type6, name7, type7, name8, type8, name9, type9, name10, type10, name11, type11, name12, type12, name13, type13, name14, type14, name15, type15) \
struct Table##Spec: ::tightdb::SpecBase { \
    typedef ::tightdb::util::TypeAppend< void,     type1 >::type Columns1; \
    typedef ::tightdb::util::TypeAppend< Columns1, type2 >::type Columns2; \
    typedef ::tightdb::util::TypeAppend< Columns2, type3 >::type Columns3; \
    typedef ::tightdb::util::TypeAppend< Columns3, type4 >::type Columns4; \
    typedef ::tightdb::util::TypeAppend< Columns4, type5 >::type Columns5; \
    typedef ::tightdb::util::TypeAppend< Columns5, type6 >::type Columns6; \
    typedef ::tightdb::util::TypeAppend< Columns6, type7 >::type Columns7; \
    typedef ::tightdb::util::TypeAppend< Columns7, type8 >::type Columns8; \
    typedef ::tightdb::util::TypeAppend< Columns8, type9 >::type Columns9; \
    typedef ::tightdb::util::TypeAppend< Columns9, type10 >::type Columns10; \
    typedef ::tightdb::util::TypeAppend< Columns10, type11 >::type Columns11; \
    typedef ::tightdb::util::TypeAppend< Columns11, type12 >::type Columns12; \
    typedef ::tightdb::util::TypeAppend< Columns12, type13 >::type Columns13; \
    typedef ::tightdb::util::TypeAppend< Columns13, type14 >::type Columns14; \
    typedef ::tightdb::util::TypeAppend< Columns14, type15 >::type Columns; \
 \
    template<template<int> class Col, class Init> struct ColNames { \
        typename Col<0>::type name1; \
        typename Col<1>::type name2; \
        typename Col<2>::type name3; \
        typename Col<3>::type name4; \
        typename Col<4>::type name5; \
        typename Col<5>::type name6; \
        typename Col<6>::type name7; \
        typename Col<7>::type name8; \
        typename Col<8>::type name9; \
        typename Col<9>::type name10; \
        typename Col<10>::type name11; \
        typename Col<11>::type name12; \
        typename Col<12>::type name13; \
        typename Col<13>::type name14; \
        typename Col<14>::type name15; \
        ColNames(Init i) TIGHTDB_NOEXCEPT: name1(i), name2(i), name3(i), name4(i), name5(i), name6(i), name7(i), name8(i), name9(i), name10(i), name11(i), name12(i), name13(i), name14(i), name15(i) {} \
    }; \
 \
    static void dyn_col_names(tightdb::StringData* names) TIGHTDB_NOEXCEPT \
    { \
        names[0] = tightdb::StringData(#name1, sizeof #name1 - 1); \
        names[1] = tightdb::StringData(#name2, sizeof #name2 - 1); \
        names[2] = tightdb::StringData(#name3, sizeof #name3 - 1); \
        names[3] = tightdb::StringData(#name4, sizeof #name4 - 1); \
        names[4] = tightdb::StringData(#name5, sizeof #name5 - 1); \
        names[5] = tightdb::StringData(#name6, sizeof #name6 - 1); \
        names[6] = tightdb::StringData(#name7, sizeof #name7 - 1); \
        names[7] = tightdb::StringData(#name8, sizeof #name8 - 1); \
        names[8] = tightdb::StringData(#name9, sizeof #name9 - 1); \
        names[9] = tightdb::StringData(#name10, sizeof #name10 - 1); \
        names[10] = tightdb::StringData(#name11, sizeof #name11 - 1); \
        names[11] = tightdb::StringData(#name12, sizeof #name12 - 1); \
        names[12] = tightdb::StringData(#name13, sizeof #name13 - 1); \
        names[13] = tightdb::StringData(#name14, sizeof #name14 - 1); \
        names[14] = tightdb::StringData(#name15, sizeof #name15 - 1); \
    } \
 \
    struct ConvenienceMethods { \
        void add(type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11, type12 name12, type13 name13, type14 name14, type15 name15) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->add((::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12, name13, name14, name15)); \
        } \
        void insert(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11, type12 name12, type13 name13, type14 name14, type15 name15) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->insert(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12, name13, name14, name15)); \
        } \
        void set(std::size_t _tightdb_i, type1 name1, type2 name2, type3 name3, type4 name4, type5 name5, type6 name6, type7 name7, type8 name8, type9 name9, type10 name10, type11 name11, type12 name12, type13 name13, type14 name14, type15 name15) \
        { \
            ::tightdb::BasicTable<Table##Spec>* const _tightdb_t = \
                static_cast< ::tightdb::BasicTable<Table##Spec>* >(this); \
            _tightdb_t->set(_tightdb_i, (::tightdb::util::tuple(), name1, name2, name3, name4, name5, name6, name7, name8, name9, name10, name11, name12, name13, name14, name15)); \
        } \
    }; \
}; \
typedef ::tightdb::BasicTable<Table##Spec> Table;


#endif // TIGHTDB_TABLE_MACROS_HPP
